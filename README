########################################################################

======
Replicant
======

Replicant aims to be a Dropbox-like file replication and sync utility providing
the following features:

  - Variable backing stores
    - Amazon S3
    - LAN Server
    - Local directory
  - Rollback and pin support
    - Ability to roll a given directory back in time and 'pin' it
    - When a directory is 'pinned':
      - Updates from the server for that directory are discarded
      - Local changes are still replicated to the server
    - When a directory changes from 'pinned' to 'unpinned':
      - Server updates are retrieved and processed
      - Any conflicts are presented to the user for resolution
  - Peer to Peer support
    - Changes made on machines on the same network that share a directory (or more)
      will be replicated via Peer to Peer connection, rather than necessitating a
      trip to the server
  - Multiple directory support
    - Support for replicating multiple directories at various local locations
  - Multiple account support
    - Support for replicating directories managed by multiple 'accounts'
    
This project was seeded with code from Helium, an open source project funded
by Whitemoon Dreams, Inc.  That code is derived from the Nocturnal Initiative,
an open source project at Insomniac Games.

http://nocturnal.insomniacgames.com/
http://www.insomniacgames.com/
http://www.insomniacgames.com/research_dev/
http://whitemoondreams.com/

========
Download
========

Source archive of head revision:
http://github.com/andyburke/Replicant/zipball/master

Git URL (read only):
git://github.com/andyburke/Helium.git

===============
Building Replicant
===============

First, you'll need to build Dependencies.sln, which should build all
the libraries Helium depends upon.  You must build Dependencies.sln
using the same Project Configuration and Platform as you plan to use
for Replicant.  (Eg: Debug / Win32, Release Unicode / x64)

Once you've build Dependencies.sln, you should be able to build
Replicant.sln.  Again, make sure your Project Configuration and Platform
setting match up.

===============
Unicode Support
===============

Unicode is built via solution and project configurations (Debug Unicode
and Release Unicode).  wxWidgets is signalled to compile and link via
wxUSE_UNICODE which is specified in the Unicode.vsprops file.  This
vsprops file is inherited only in Unicode project configurations.

====================
Platform Agnosticism
====================

We are moving toward a platform-agnostic toolkit from windows-only.  For
the time being we are moving all platform-specific API calls into
Platform.vcproj.

-Andy (AKA andyburke)
########################################################################

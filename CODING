########################################################################
Replicant Coding Guidelines



==================
Naming Conventions
==================
In general, code should be as self documenting as possible. All names should be composed of complete and descriptive words; words should not be shortened or abbreviated unless the full length of the name is considered "too long"; a name may be considered "too long" if it has a length greater than ~25 characters, however this is not a strict rule, in general, use your better judgment to determine if a name should be shortened; and try to only abbreviate words that have standard and well known abbreviations.


----------
Namespaces
----------
All names within a library or an isolated module should be enclosed in a unique namespace; namespace names should be UpperCamelCase.


-------------------
Structs and Classes
-------------------
Base Classes
Sub Classes
Utility Classes


-----
Enums
-----
* Enums should be placed in their own explicit namespace - so as not to contaminate the containing namespace with extraneous symbols
** Namespace name should be plural
*** As the container for all of the enum symbols; the namespace name is used to refer to individual enum values as FileAccessFlags::Append rather than just Append
** Enum – used to declare variables
*** The name should be plural if an enum variable may contain more than one of the enum flags, eg:
      
      FindFileFlags::FindFlags flags;

*** The name should be singular if the enum values are mutually exclusive, allowing you to declare a variable that is ONE of many enum values, eg:

      FileAccessFlags::FileMode mode;
      
** Enum member names should be CamelCase, with leading uppercase character
** Enum member names should NOT be all caps or prefixed with a character indicator like “k_”
** Use a typedef to shorten enum variable declaration, eg:

      typedef FileAccessFlags::FileAccessFlag FileAccessFlag;
      
** Note: When you refer to an enum inside a type, you do not need to specify the name of the enum – which results in the following compiler warning:
       
       warning C4482: nonstandard extension used: enum 'enum' used in qualified name

---------------------------------EXAMPLE--------------------------------
  namespace FileAccessFlags
  {
    enum FileAccessFlag
    {
      Read              = 1 << 0,
      Write             = 1 << 1,
      Append            = 1 << 2,
      Truncate          = 1 << 3,
      RandomAccess      = 1 << 4,
      SequentialAccess  = 1 << 5,
    };
  }
  typedef FileAccessFlags::FileAccessFlag FileAccessFlag;

  ...

  void MyFunc( FileAccessFlag flags )
  {
    if ( flags & FileAccessFlags::Append )
    { 
      return OPEN_EXISTING;
    }
  }

  ...

  FileAccessFlag flags = ( FileAccessFlag ) ( FileAccessFlags::Append | FileAccessFlags::Write );
  FileAccessFlag mode = ( FileAccessFlag ) FileAccessFlags::SequentialAccess;
  
------------------------------/END EXAMPLE------------------------------
  

---------
Variables
---------
Local: Local variables and function parameters should be defined in lowerCamelCase. 

  int localVariable = 0;

Member: Member variables should be defined with the "m_" prefix, in UpperCamelCase. 
std::string m_MemberValiable;
Global: Global variables, externalized from the source file, should be defined in the header files with the "g_" prefix, in UpperCamelCase. 
extern MODULE_API int g_GlobalVariable;
Static: Static variables should be defined in the source file with the "s_" prefix, in UpperCamelCase. 
static const char* s_StaticVariable = "Hello world\n";
Constants
External - Externalized constants, defined in the header file, should be made using either Enums (see above) or the C convention of #define, written in all caps, and underscore separated. 
#define POUND_DEFINED_CONSTANT 1024
Internal - If a constant is never externalized from a source file, the C++ ‘const’ modifier may be used instead, and the constant should be defined as a Static variable (see above)


------
Macros
------

In general, C-style macros should not be used when it is possible to use a C++ inline function instead. Where C-style macros are necessary, they should be written in all caps with underscores to separate each word.
 NOC_ASSERT(…)

 
---------------
Files & Fodlers
---------------
A file should be named after the class that is contains, and placed under a folder of the namespace name; for example:

---------------------------------EXAMPLE--------------------------------
Foo/
Foo/Bar.h
  namespace Foo
  {
    class Bar
    {
    public:
      Bar();
      ~Bar();

      void Func();
      ...
    }
  }

Foo/Bar.cpp
  using namespace Foo;

  Bar::Bar()
  {
  }

  Bar~Bar()
  {
  }

  void Bar::Func()
  {
  }
------------------------------/END EXAMPLE------------------------------






==================
Message Formatting
==================

-----
Rules
-----
Its important that messages to the user (console printing, message box text, and exception message bodies) be homogeneous and in good form:
Use complete sentences, and don't abbreviate words ("vert", "jnt", "var")
Use periods. Phrases are bad for code that amend other module's messages.
Don't use exclamation points. Errors are raised with color coding so they are unnecessary.
Don't put code in messages. It only makes the messages harder to understand for users.
Under no circumstances tell the user to go tell a particular named programmer about a problem, or to get help directly from them. Our support personnel is responsible for finding a programmer to track down any particular issue ("Tell Reddy", "Grab Sam").
All references to assets and files should be surrounded in single quotes. (', not `)
Don't use newline characters in exception message text.


--------
Examples
--------

Good:
  throw IG::Exception ("Triangle vertex limit exceeded. The limit is 256 triangles.");
  ERR("Triangle vertex limit exceeded. The limit is 256 triangles.\n");
  
Bad:
  throw IG::Exception ("Tri vert limit too far!!\nIncrease limit in TriPool.cpp (go tell Reddy or Fred)\n");
  throw IG::Exception("mTracks[AT_ROTATE_X]->isSampled() && mTracks[AT_ROTATE_Y]->isSampled() && mTracks[AT_ROTATE_Z]->isSampled()\n");






  
====
Misc
====

----------
File Paths
----------

All internal paths are expected to contain only forward slashes; however, they will be displayed to the user with backward slashes – this makes it easier for them to cut/copy/paste the paths into a command prompt. Internal folder paths will always have a trailing slash.
There are several functions in the FileSystem library to help you clean up and format user entered paths:
CleanName - Formats the path to belower case (optional) and use forward slashes
Win32Name - Same as CleanName but with backward slashes
GuaranteeSlash - Guarantee's that the folder path has a trailing forward slash






======================
User-Proposed Addendum
======================

-----------
Geoff Evans
-----------

Here is a 'model' class IMO.
Data fields
RTTI macros/functions
Construction/destruction
Functional implementation
Litter 'private'/'protected'/'public' where necessary.
Focus on grouping members and functions next to each other if they are related. Getter and setter functions should be adjoint, and groups of functions that work together (on similar fields or similar data) should be next to each other.

---------------------------------EXAMPLE--------------------------------
 class REFLECT_API Version : public ConcreteInheritor<Version, Element>
 {
 public:
   //
   // Fields
   //
   
   std::string m_Source;
   std::string m_SourceVersion;
   std::string m_SourceFile;
   i32         m_SourceFileVersion;
   std::string m_FileFormatVersion;
   static const char* FILE_FORMAT_VERSION;
   
   //
   // RTTI macros/functions
   //
   
   static void EnumerateClass( Reflect::Compositor<Version>& comp );
   
   //
   // Construction/Destruction
   //
   
   Version ();
   Version(const char* source, const char* sourceVersion);
   Version(const char* source, const char* sourceVersion, const char* sourceFile);
   
   //
   // Implementation
   //
   
   virtual bool IsCurrent();
   bool ConvertToInts( int* ints );
   void DetectVersion();
 };
------------------------------/END EXAMPLE------------------------------



----------
Ryan Smith
----------

Here's the main idea:
Write the header file to be easy to see what the interface is -- write for humans reading your code to see how to use it.
Since we read top-to-bottom, put publicly accessible things at the top.
Prefer accessors to public member variables
Group all variables together.

Here is what I actually do:
Public Functions (including constructors)
Protected Functions
Member Variables
in order: public, protected, private
unless you have other reasons, like alignment or size
Private Functions


---------------------------------EXAMPLE--------------------------------
  class REFLECT_API Version : public ConcreteInheritor<Version, Element>
  {
  public: 
    //
    // Construction/Destruction
    //
    
    Version ();
    Version(const char* source, const char* sourceVersion);
    Version(const char* source, const char* sourceVersion, const char* sourceFile);
    
    //
    // Implementation
    //
    
    virtual bool IsCurrent();
    bool ConvertToInts( int* ints );
    void DetectVersion();

  protected:
    virtual bool DoSomething(); 

  public: 

    // 
    // public fields, if you must have them
    // 
    std::string m_Source;
    std::string m_SourceVersion;
    std::string m_SourceFile;

  private:
    i32         m_SourceFileVersion;
    std::string m_FileFormatVersion;
    static const char* FILE_FORMAT_VERSION;
    
    //
    // RTTI macros/functions
    //
    
    REFLECT_DEFINE_CLASS(Version, Element); 
    REFLECT_ENUMERATE_CLASS(Version)
    {
      REFLECT_SOME_OTHER_STUFF(m_SourceFileVersion, Reflect::IntSerializer); 
    }

    // internal validation routines
    // 
    void ValidateVersion(); 
    void LoginToServer(); 
  };
------------------------------/END EXAMPLE------------------------------

I actually thought I liked private functions up after protected functions, but...
It turns out I tend to write them at the end, since they are internal implementation and farther away from public interface that anyone needs to know about.

RTTI Macros are a little goofy
I don't view them as part of the public interface
I move them around depending on context:
eg. LUNA_DECLARE_TYPE by itself at the top
eg. REFLECT_DEFINE_CLASS + REFLECT_ENUMERATE_CLASS probably at the bottom, after the variables

I agree with these points, basically:
Focus on grouping members and functions next to each other if they are related.
Getter and setter functions should be adjoint
Groups of functions that work together (on similar fields or similar data) should be next to each other.

I don't like things where you end up with redundant protection declarations, although I make an exception when switching from public member functions to public variables.

---------------------------------EXAMPLE--------------------------------
  class Something
  {
  public: 
     Something(); 
     ~Something(); 
     
  public: //<--- I would remove this.
     void AnotherFunction(); 

  public: //<--- but I might keep this, depending on how far away the last "public" was. 
     std::string m_SomeVar; 
  };
------------------------------/END EXAMPLE------------------------------



########################################################################